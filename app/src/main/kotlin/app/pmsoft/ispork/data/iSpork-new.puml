@startuml
hide empty members
skinparam backgroundColor #2B2B2B
skinparam shadowing false
skinparam StereotypeCBackgroundColor #4EAA43
skinparam StereotypeEBackgroundColor #9876AA
skinparam ArrowColor #FF0080
skinparam ArrowFontColor #B3DE06
skinparam package {
  FontColor #A9B7C6
  BorderColor #FFA108
}
skinparam enum {
  BackgroundColor #3A2D41
  FontColor #9876AA
}
skinparam class {
  BackgroundColor #364135
  FontColor #4ADEB1
  StereotypeFontColor #E78BFF
  FontStyle bold
  BorderColor #4EAA43
  AttributeFontColor #89C69B
}
skinparam note {
  BackgroundColor #FFC66D
  BorderColor #FF0080
}

class Interval {
  length : Int
}
enum Interval.Unit {
  DAY
  WEEK
  MONTH
  YEAR
}
Interval *-- Interval.Unit
class "Amount : Long" <<(T,#FFFFFF) Typealias>> {
}

package Settings <<Rectangle>> {
  class BudgetSettings {
    workdays : Int
    timeZone : TimeZone
  }
  note bottom
    These settings affect how
    the budget works.
  end note
  class AppSettings {
    defaultCurrency : Currency
    startOfWeek : Weekday
    dateFormat : DateFormat
    timeFormat : TimeFormat
  }
  note bottom
    These settings affect how
    the UI behaves.
  end note
}

package "Budget" <<Rectangle>> {
  class Category {
    name : String
  }
  class BudgetPot {
    priority : Int
    currency : Currency
  }
  note left
    Represents funds that can be spent.

    The currency cannot be changed.
    If a new currency is needed, it
    is no problem to create a new
    budget pot in the same category.
  end note
  class BudgetAllocation {
    entryDate : Date
    amount : Amount
  }
  note left
    Represents a fund allocation towards
    a certain budget pot.
  end note
  package "Saving Goals" <<Rectangle>> {
    class SavingGoal {
      name : String
      notes : String
      targetDate : Date
      rate : Amount
    }
    class SavingGoalSplit {
      targetAmount : Amount
      notes : String
    }
  }
  SavingGoal *-- "1" Interval : Embedded
  SavingGoalSplit *-- "1" BudgetPot
  SavingGoal *-- "*" SavingGoalSplit

  class SpendingBuffer {
    name : String
    min : Amount
    max : Amount
    rate : Amount
    notes : String
  }
  Interval "1" --* SpendingBuffer : Embedded
  SpendingBuffer *-- "1" BudgetPot

  package "Emergency Funds" <<Rectangle>> {
  class EmergencyFund << (S,#FFC66D) Singleton>> {
    safety : Int
  }
  class CrucialItem {
    cost : Amount
    lifeExpectancy : Int
  }
  class EmergencyCategory << (S,#FFC66D) Singleton>>
  EmergencyCategory --|> Category
  EmergencyFund o-- "*" CrucialItem
  EmergencyFund *-- "1" BudgetPot
  CrucialItem *-- "1" BudgetPot
  EmergencyFund <..> EmergencyCategory : "Linked via\nBudgetPot"
  }
  BudgetPot *-- "*" BudgetAllocation
  BudgetPot "*" --o Category
}

package "Participants" <<Rectangle>> {
  class Participant {
    name : String
    multiCurrency : Boolean
    defaultCurrency : Currency
    bookingDateIsEntryDate : Boolean
  }
  note top
    Defines an account, a person
    or an external payee (like a store).

    Accounts can be single or multi currency
    participants, while persons always are
    multi currency.
  end note
  class MoneyBag {
    startingBalance : Amount
    currency : Currency
  }
  note bottom
    If a participant receives money in a new currency,
    a MoneyBag for that currency and participant is added.

    The balance is calculated from the starting balance
    and all SubTransactions that target this participant
    and have the same currency.
  end note
  enum Participant.Type {
    PERSON
    ACCOUNT
    PAYEE
    {method} internal : Boolean
  }
  Participant *-- "1" Participant.Type
  Participant *-- "*" MoneyBag
}

package "Transaction Definition" <<Rectangle>> {
  class TransactionDefinition {
    'tags : List<String>
    entryDate : Date
  }
  note right of TransactionDefinition
    A transaction is considered to be booked
    when its entryDate is not null.

    A booked transaction counts towards
    account and budget pot balances - a
    scheduled transaction does not.
  end note
  class SubTransaction {
    amountInBookedCurrency : Amount
    amountInBaseCurrency : Amount
    bookingDate : Date
    notes : String
  }
  note left
    Represents a single booking on
    one participant. Like:
    - a withdrawal from a bank account
    - a withdrawal into the wallet
    - a store receipt

    The "booked" currency is determined
    by the MoneyBag this is linked with.
  end note
  class BudgetFlow {
    amountInTransaction : Amount
    amountInBudget : Amount
    notes : String
  }
  note right
    A SubTransaction with an
    external participant but
    without a BudgetFlow
    is considered to be "income".
  end note
  note bottom of BudgetFlow
    Represents an external flow entry in the budget.
    Multiple of these per SubTransaction are used for
    splitting a shopping haul into categories.

    A difference in the two amount fields is only
    warranted in case the SubTransaction and the
    BudgetPot have different currencies.
  end note
}
TransactionDefinition *-- "2..*" SubTransaction
SubTransaction *-- "*" BudgetFlow
SubTransaction o-- "1" MoneyBag
BudgetFlow o-- "1" BudgetPot

enum OffsetType {
  DAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

package "Scheduled Transactions" <<Rectangle>> {
  class ScheduledTransaction {
    name : String
    timeZone : TimeZone
  }
  note left
    The time zone defines in which
    time zone the next occurrence
    should be calculated in.
  end note
  class ScheduledRhythm {
    startDate : Date
    endDate : Date
    pattern : Int
    dayOffset : Int
    waitForWorkday : Boolean
  }
  class NextOccurrence <<Not Synced>>{
    date : Date
  }
  note left: Is not synced because it is calculated\nfrom given information.
  ScheduledRhythm o-- "1" OffsetType
  ScheduledTransaction *-- "1..*" ScheduledRhythm
  NextOccurrence *-- "1" ScheduledTransaction
}
note as SN
  The transaction definition of the
  ScheduledTransaction is copied
  when an occurrence of a it is realized.

  This includes the SubTransactions
  and their BudgetFlows.

  Also, the source scheduled transaction
  is linked on the transaction definition.
end note
SN .. ScheduledTransaction
SN .. TransactionDefinition
ScheduledTransaction "1" *-- "1" TransactionDefinition
ScheduledTransaction "1" --o "*" TransactionDefinition
ScheduledRhythm *-- "1" Interval : Embedded
@enduml
